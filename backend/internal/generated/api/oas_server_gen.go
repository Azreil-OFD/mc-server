// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DownloadGet implements GET /download operation.
	//
	// Отдаёт zip-архив, содержащий файлы модов.
	//
	// GET /download
	DownloadGet(ctx context.Context) (DownloadGetRes, error)
	// HealthGet implements GET /health operation.
	//
	// Возвращает 200 OK, если сервис работает.
	//
	// GET /health
	HealthGet(ctx context.Context) (HealthGetOK, error)
	// ListGet implements GET /list operation.
	//
	// Возвращает список модов с указанием, активен ли
	// каждый из них.
	//
	// GET /list
	ListGet(ctx context.Context) (ListGetRes, error)
	// UploadPost implements POST /upload operation.
	//
	// Загружает один или несколько .jar файлов модов в папку
	// `mods`.   Поддерживаются частичные загрузки.
	// Возвращаются причины отклонения файлов.
	//
	// POST /upload
	UploadPost(ctx context.Context, req *UploadPostReq) (UploadPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
